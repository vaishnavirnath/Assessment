# -*- coding: utf-8 -*-
"""LVADSUSR128_vaishnavi_lab2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1GSozaop2cxHOrL6HUFeTlrbAfjHVhSuZ
"""

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.tree import DecisionTreeClassifier
from sklearn.preprocessing import LabelEncoder
from sklearn.metrics import accuracy_score,f1_score,precision_score,recall_score
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.metrics import confusion_matrix

df =pd.read_csv("/content/booking.csv")
df.head()

df.describe()

df.info()

df.isnull().sum()

sns.boxplot(data=df['lead time'])
plt.show()

sns.boxplot(data=df['number of weekend nights'])
plt.show()

sns.boxplot(data=df['number of week nights'])
plt.show()

sns.boxplot(data=df['average price'])
plt.show()

df.drop(columns = ['Booking_ID','car parking space','repeated','P-C','P-not-C','date of reservation','market segment type','special requests'],axis =1,inplace=True)
df.head(5)

df['room type'].unique()

l = LabelEncoder()
df['room type']=l.fit_transform(df['room type'])
df['type of meal']=l.fit_transform(df['type of meal'])
df['booking status']=l.fit_transform(df['booking status'])
df.head(5)

df.drop_duplicates()

df.info()

x=df[['number of adults','number of children','number of weekend nights','number of week nights','type of meal','room type','lead time','average price']]
y=df['booking status']

d= DecisionTreeClassifier()
l=LogisticRegression()

x_train,x_test,y_train,y_test =train_test_split(x,y,test_size=0.3,random_state=42)
l.fit(x_train,y_train)
y_pred=l.predict(x_test)
m=accuracy_score(y_pred,y_test)

print(m)

recall = recall_score(y_pred,y_test)
recall

precision = precision_score(y_pred,y_test)
precision

f1score =f1_score(y_pred,y_test)
f1score

"""## Descision Tree"""

x_train,x_test,y_train,y_test =train_test_split(x,y,test_size=0.3,random_state=42)
d.fit(x_train,y_train)
y_pred=d.predict(x_test)
m=accuracy_score(y_pred,y_test)

print(m)

recall = recall_score(y_pred,y_test)
recall

precision = precision_score(y_pred,y_test)
precision

f1score =f1_score(y_pred,y_test)
f1score

c = confusion_matrix(y_pred,y_test)
c

